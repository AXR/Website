<?xml version="1.0" encoding="UTF-8"?><project name="axr-check" default="build">	<target name="build" depends="init, verify" />	<target name="verify" depends="init, lint-php-custom, lint-js-custom, lint-css-custom"/>	<target name="lint-php-custom" description="Check custom PHP files for syntax errors using PHPLint" depends="init">		<phplint haltonfailure="true">			<fileset refid="src.php.custom" />		</phplint>	</target>	<target name="lint-js-custom" description="Check custom Javascript files using JSlint" depends="init, setup-jslint4java, setup-jslint">		<foreach target="jslint-file" param="filename" absparam="absfilename">			<fileset refid="src.js.custom"/>		</foreach>	</target>  	<target name="jslint-file">		<echo>Linting file: ${absfilename}</echo>		<!-- Execute jslint4java and return the result in checkstyle format-->		<exec command="java -jar ${jslint4java.file} --jslint ${jslint.file} --report checkstyle ${absfilename}" outputProperty="report" />		<!-- Print the result to a file.  Replace / with - in path to create legal filenames in the format `checkstyle-jslint-dir1-dir2-file.js.xml`. -->		<php function="str_replace" returnProperty="filename.normalized">			<param value="/" />			<param value="-" />			<param value="${filename}" />		</php>		<delete file="${project.logdir}/checkstyle-jslint-${filename.normalized}.xml" />		<append text="${report}"  destFile="${project.logdir}/checkstyle-jslint-${filename.normalized}.xml" />	</target>	<!-- #### Setup jslint4java -->	<target name="setup-jslint4java" depends="init" unless="project.jslint4java.setup">		<property name="jslint4java.dir" value="${project.toolsdir}/jslint4java" />		<php function="basename" returnProperty="jslint4java.basename">			<param value="${jslint4java.url}" />			<!-- We assume that the version of jslint4java used is a distribution where the filename ends in `-dist.zip` -->			<param value="-dist.zip" />		</php>		<!-- Download and unpack jslint4java -->		<mkdir dir="${jslint4java.dir}" />		<php function="basename" returnProperty="jslint4java.zipfile">			<param value="${jslint4java.url}" />		</php>		<httpget url="${jslint4java.url}" dir="${jslint4java.dir}"/>		<unzip file="${jslint4java.dir}/${jslint4java.zipfile}" todir="${jslint4java.dir}" />		<!-- Other targets use this property to determine the location of the `jslint4java.jar` file -->		<property name="jslint4java.file" value="${jslint4java.dir}/${jslint4java.basename}/${jslint4java.basename}.jar"/>		<!-- Set property to prevent unnecessary additional invocations of this target -->		<property name="project.jslint4java.setup" value="true" />	</target>	<!-- #### Setup jslint -->	<target name="setup-jslint" depends="init" unless="project.jslint.setup">		<phingcall target="setup-git-repo">			<property name="repo.dir" value="${project.toolsdir}/jslint"/>			<property name="repo.url" value="${jslint.repository.url}" />		</phingcall>		<!-- Other targets use this property to determine the location of the jslint file -->		<property name="jslint.file" value="${project.toolsdir}/jslint/${jslint.file}" override="true" />		<!-- Set property to prevent unnecessary additional invocations of this target -->		<property name="project.jslint.setup" value="true" />	</target>	<!-- ### CSS linting Checks code against [CSS Lint](http://www.csslint.net/) to help point out problems with CSS code. It does basic syntax checking as well as applying a set of rules to the code that look for problematic patterns or signs of inefficiency. -->	<target name="lint-css" description="Check all CSS files using CSS Lint" depends="init, setup-rhino, setup-csslint">		<foreach target="csslint-file" param="filename" absparam="absfilename">			<fileset refid="src.css"/>		</foreach>	</target>	<target name="lint-css-custom" description="Check custom CSS files using CSS Lint" depends="init, setup-rhino, setup-csslint">		<foreach target="csslint-file" param="filename" absparam="absfilename">		<fileset refid="src.css.custom"/>		</foreach>	</target>	<!-- #### csslint a file-->	<target name="csslint-file">		<echo>Linting file: ${absfilename}</echo>		<!-- Run csslint through Rhino and return the result in checkstyle format-->		<exec command="java -jar ${rhino.jar} ${csslint.rhino.file} --format=checkstyle-xml --rules=${csslint.rules} ${absfilename}" outputProperty="report" />		<!-- Print the result to a file. Replace / with - in path to create legal filenames in the format `checkstyle-csslint-dir1-dir2-file.css.xml`. -->		<php function="str_replace" returnProperty="filename.normalized">			<param value="/" />			<param value="-" />			<param value="${filename}" />		</php>		<property name="csslint.report.file" value="${project.logdir}/checkstyle-csslint-${filename.normalized}.xml" />		<delete file="${csslint.report.file}" />		<append text="${report}"  destFile="${csslint.report.file}" />		<!-- CSS Lint reports parsing errors in CSS files using the Parsing Errors rule. Consequently if the checkstyle file contains errors with the net.csslint.ParsingErrors source a parsing error has been detected. -->		<loadfile property="csslint.parseerrors" file="${csslint.report.file}">			<filterchain>				<linecontainsregexp>					<regexp pattern="(net\.csslint\.ParsingErrors)" />				</linecontainsregexp>			</filterchain>		</loadfile>		<!-- Break if any parsing errors are detected! -->		<if>			<not>				<equals arg1="${csslint.parseerrors}" arg2="" />			</not>			<then>				<fail message="CSS parsing error detected in file ${absfilename}" />			</then>		</if>	</target>	<!-- #### Setup csslint -->	<target name="setup-csslint" depends="init" unless="project.csslint.setup">		<phingcall target="setup-git-repo">			<property name="repo.dir" value="${project.toolsdir}/csslint"/>			<property name="repo.url" value="${csslint.repository.url}" />			<property name="repo.revision" value="${csslint.repository.revision}" />		</phingcall>		<!-- Other targets use this property to determine the location of the csslint rhino file -->		<property name="csslint.rhino.file" value="${project.toolsdir}/csslint/release/csslint-rhino.js" />		<!-- Set property to prevent unnecessary additional invocations of this target -->		<property name="project.csslint.setup" value="true" />	</target>								 	<target name="init" depends="load-properties, setup-dirs, setup-filesets" unless="project.initialized">		<!-- Set property to prevent target from being executed multiple times -->		<property name="project.initialized" value="true"/>	</target>      <target name="setup-rhino" depends="setup-dirs" unless="project.rhino.setup">		<property name="rhino.dir" value="${project.toolsdir}/rhino" />     		<php function="basename" returnProperty="rhino.basename">			<param value="${rhino.url}" />			<!-- We assume that the version of Rhino used is a distribution where the filename ends in `.zip` -->			<param value=".zip" />		</php>		<!-- Other targets use this property to determine the location of the `js.jar` file -->		<property name="rhino.jar" value="${rhino.dir}/${rhino.basename}/js.jar"/>		<!-- If the Rhino js.jar file is not available then download and unpack Rhino -->		<if>			<not>				<available file="${rhino.jar}"/>			</not>			<then>				<mkdir dir="${rhino.dir}" />				<php function="basename" returnProperty="rhino.zipfile">					<param value="${rhino.url}" />				</php>				<httpget url="${rhino.url}" dir="${rhino.dir}"/>				<unzip file="${rhino.dir}/${rhino.zipfile}" todir="${rhino.dir}" />			</then>		</if>		<!-- Set property to prevent unnecessary additional invocations of this target -->		<property name="project.rhino.setup" value="true" />	</target>  	<target name="load-properties">		<php function="dirname" returnProperty="phing.dir">			<param value="${phing.file}"/>		</php>		<property name="project.basedir" value="${phing.dir}" />		<!-- Use condition instead of unless property as we cannot unset properties in Phing -->		<if>			<or>				<!-- `istrue` evaluates to true is value is not set we need to check `isset` as well -->				<not>					<istrue value="${project.properties.loaded}" />				</not>				<not>					<isset property="project.properties.loaded" />				</not>			</or>			<then>				<!-- By default Jenkins runs Phing from the directory containing the build file.  If this file is located in a subdirectory - e.g. when using Phing Drupal as a submodule - we need to reset the project basedir and reload properties. NB: This only works if the subdirectory is directly within the Drupal root directory. -->				<if>					<!-- If `build.properties` exists then assume we have a project root directory -->					<available file="${project.basedir}/../build.properties"/>					<then>						<resolvepath propertyName="project.basedir" file="${project.basedir}/../"/>					</then>				</if>				<!-- By default use default properties file `build.default.properties` -->				<property name="project.properties.file" value="${phing.dir}/build.default.properties" />				<!-- Load the default properties.Override in case `load-properties` are called multiple times. -->				<property file="${project.properties.file}" override="true" />				<!-- Allow override using `build.properties` in build file directory -->				<available file="${phing.dir}/build.properties" property="project.properties.file" value="${phing.dir}/build.properties" />				<!-- Allow override using `build.properties` in project base directory -->				<available file="${project.basedir}/build.properties" property="project.properties.file" value="${project.basedir}/build.properties" />				<!-- Load the overriding properties. -->				<property file="${project.properties.file}" override="true" />				<!-- Set property to prevent unnecessary additional invocations of this target -->				<property name="project.properties.loaded" value="true" />			</then>		</if>	</target>  	<target name="setup-dirs" depends="load-properties">		<if>			<isset property="drupal.make.dir"/>			<then>				<property name="project.drupal.dir" value="${project.basedir}/${drupal.make.dir}" />			</then>			<else>				<property name="project.drupal.dir" value="${project.basedir}" />			</else>		</if>		<property name="project.sitesdir" value="${project.drupal.dir}/sites/default" />		<property name="project.builddir" value="${project.basedir}/build" />		<property name="project.toolsdir" value="${project.builddir}/tools" />		<property name="project.logdir" value="${project.builddir}/logs" />				    <!-- Recreate directories for artifacts -->		<mkdir dir="${project.toolsdir}"/>		<mkdir dir="${project.testdir}"/>	</target>	<!-- ### Setup file sets - patterns for different aspects of the source code. These are used in other targets. This is part of the initialization of the build. This target should only be called from `init` target. -->	<target name="setup-filesets" depends="load-properties">    <!-- Define pattern sets for future reference -->		<!-- PHP files -->		<patternset id="php">			<include name="**/*.php" />			<include name="**/*.module" />			<include name="**/*.install" />			<include name="**/*.inc" />			<include name="**/*.profile" />			<include name="**/*.test" />		</patternset>		<!-- Javascript files -->		<patternset id="js">			<include name="**/*.js" />			<!-- Minimized JavaScript files should not be analyzed. In their optimized state they can not be expexted to conform to coding standards. -->			<exclude name="**/*.min.js" />		</patternset>		<!-- CSS files -->		<patternset id="css">			<include name="**/*.css" />		</patternset>		<!-- Directories for community contributed code. We exclude these from code analysis as we cannot be held responsible for any problems here. -->		<patternset id="contrib">			<exclude name="**/contrib/**/*.*" />			<exclude name="**/libraries/**/*.*" />		</patternset>		<!-- We exclude generated files from We exclude these from code analysis as we cannot be held responsible for any problems here. -->		<patternset id="generated">			<exclude name="**/*.features.*" />			<exclude name="**/*.field_group.inc" />			<exclude name="**/*.layouts.inc" />			<exclude name="**/*.pages_default.inc" />			<exclude name="**/*.panels_default.inc" />			<exclude name="**/*.strongarm.inc" />			<exclude name="**/*.views_default.inc" />		</patternset>		<!-- Define file sets for future reference -->		<!-- All PHP files -->		<fileset id="src.php" dir="${project.drupal.dir}">			<patternset refid="php"/>		</fileset>		<!-- Custom PHP files -->		<fileset id="src.php.custom" dir="${project.sitesdir}">			<patternset refid="php"/>			<patternset refid="contrib"/>			<patternset refid="generated"/>		</fileset>		<!-- All Javascript files -->		<fileset id="src.js" dir="${project.drupal.dir}">			<patternset refid="js" />		</fileset>		<!-- Custom Javascript files -->		<fileset id="src.js.custom" dir="${project.sitesdir}">			<patternset refid="js" />			<patternset refid="contrib" />		</fileset>		<!-- All CSS files -->		<fileset id="src.css" dir="${project.basedir}">			<patternset refid="css" />		</fileset>		<!-- Custom CSS files -->		<fileset id="src.css.custom" dir="${project.sitesdir}">			<patternset refid="css" />			<patternset refid="contrib" />		</fileset>	</target>	<!-- ### Clone a git repository -->	<target name="setup-git-repo">		<!-- Only clone if repository does not exist already -->		<if>			<not>				<available file="${repo.dir}" />			</not>			<then>				<!-- Set revision to HEAD if not already defined -->				<property name="repo.revision" value="HEAD" override="false"/>				<echo>Cloning ${repo.url} ${repo.revision} into ${repo.dir}</echo>				<!-- The [`gitclone` task](http://www.phing.info/docs/guide/stable/chapters/appendixes/AppendixC-OptionalTasks.html#GitCloneTask) does not seem to work. Use exec instead. -->				<exec command="git clone ${repo.url} ${repo.dir}" />				<exec command="git checkout ${repo.revision}" dir="${repo.dir}"/>			</then>		</if>	</target></project>