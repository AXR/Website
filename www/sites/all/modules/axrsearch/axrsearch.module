<?php

/**
 * usort compare callback function
 *
 * @param mixed[] $a
 * @param mixed[] $b
 * @return int
 */
function axrsearch_cmp_relevance ($a, $b)
{
	if ($a['relevance'] == $b['relevance']) {
		return 0;
	}

	return ($a['relevance'] > $b['relevance']) ? -1 : 1;
}

/**
 * Calculate string relevance
 *
 * @param string $keys
 * @param string $str
 * @return float
 */
function axrsearch_calc_relevance ($keys, $str) {
	$keys = preg_replace('/[ ]+/', ' ', $keys);
	$keys = explode(' ', $keys);

	$kwp = 100 / count($keys);
	$relevance = 0;

	for ($i = 0, $c = count($keys); $i < $c; $i++)
	{
		$count = substr_count($str, $keys[$i]);
		$relevance += $count * $kwp / 100;
	}

	return $relevance;
}

/**
 * Get search results from media wiki.
 *
 * @param string $keys
 * @return mixed[]
 */
function axrsearch_get_mw ($keys) {
	global $base_url;

	// TODO: We should use internal API instead
	$ch = curl_init($base_url.'/wiki/api.php?action=query&list=search&format=json&srprop=snippet|timestamp&srwhat=text&srwhat=text&srsearch='.rawurlencode($keys));

	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

	$response = curl_exec($ch);
	$response = json_decode($response);

	if ($response === null) {
		return array();
	}

	$data = array();

	foreach ($response->query->search as $result) {
		$relevance = 0;
		$relevance += axrsearch_calc_relevance($keys, $result->title) * 0.6;
		// This should be calculated using the full body not just a snippet
		$relevance += axrsearch_calc_relevance($keys, $result->snippet) * 0.4;

		$data[] = array(
			'source' => 'mw',
			'title' => $result->title,
			'link' => '/wiki/'.str_replace(' ', '_', $result->title),
			'type' => 'wiki_page',
			'snippet' => $result->snippet,
			'changed' => strtotime($result->timestamp),
			'relevance' => $relevance
		);
	}

	return $data;
}

/**
 * Get search results from Drupal
 *
 * @param string $keys
 * @return mixed[]
 */
function axrsearch_get_drupal ($keys) {
	$results = module_invoke('node', 'search_execute', $keys, 'intro');
	$data = array();

	foreach ($results as $result) {
		$relevance = 0;
		$relevance += axrsearch_calc_relevance($keys, $result['node']->title) * 0.6;
		$relevance += axrsearch_calc_relevance($keys, $result['node']->body['und'][0]['value']) * 0.4;

		$data[] = array(
			'source' => 'drupal',
			'title' => $result['node']->title,
			'link' => $result['link'],
			'type' => $result['type'],
			'snippet' => $result['snippet'],
			'changed' => $result['node']->changed,
			'relevance' => $relevance
		);
	}
	
	return $data;
}

/**
 * Get combined search results.
 *
 * @param string $keys
 * @return mixed
 */
function axrsearch_get_combined ($keys) {
	$results = array_merge(axrsearch_get_drupal($keys),
		axrsearch_get_mw($keys));

	usort($results, 'axrsearch_cmp_relevance');

	return $results;
}

