<?php

namespace GitData;

require_once(SHARED . '/lib/php-markdown/markdown.php');

class Content
{
	protected $link_titles = false;
	protected $generate_toc = false;

	/**
	 * Base directory for static assets.
	 */
	protected $basedir = '';

	/**
	 * Raw summary
	 */
	protected $summary_raw;

	/**
	 * Raw content
	 */
	protected $content_raw;

	/**
	 * Parsed content
	 */
	protected $content;

	/**
	 * Autogenerated table of contents
	 */
	protected $toc;

	/**
	 * Constructor
	 */
	public function __construct ($info, $content, $summary = null)
	{
		if (isset($info->_basedir))
		{
			$this->basedir = $info->_basedir;
		}

		if (isset($info->link_titles))
		{
			$this->link_titles = (bool) $info->link_titles;
		}

		if (isset($info->generate_doc))
		{
			$this->generate_doc = (bool) $info->generate_doc;
		}

		$this->summary_raw = $summary;
		$this->content_raw = $content;
		$this->content = $this->parse_content($content);

		if ($this->link_titles || $this->generate_toc)
		{
			preg_match_all('/<h(?P<n>[2-4])>(?P<title>.+?)<\/h\1>/', $this->content, $matches);

			for ($i = 0, $c = count($matches['title']); $i < $c; $i++)
			{
				$matched = $matches[0][$i];
				$n = $matches['n'][$i];
				$title = $matches['title'][$i];

				$alias = strtolower($title);
				$alias = str_replace(' ', '-', $alias);
				$alias = preg_replace('/[^a-z0-9-_.]/', '', $alias);

				$replacement = "<h{$n}><a href=\"#{$alias}\" name=\"{$alias}\">{$title}</a></h{$n}>";
				$this->content = str_replace($matched, $replacement, $this->content);

				if ($this->options->generate_toc)
				{
					$this->toc[] = (object) array(
						'title' => $title,
						'alias' => $alias,
						'depth' => $n - 2
					);
				}
			}
		}
	}

	/**
	 * __toString
	 */
	public function __toString ()
	{
		return $this->content;
	}

	/**
	 * Get table of contents
	 */
	public function get_toc ()
	{
		return $this->toc;
	}

	/**
	 * Returns a summary of the content, if possible
	 *
	 * @todo Always return something usable
	 * @return string
	 */
	public function get_summary ()
	{
		$summary = $this->summary_raw;
		$match = null;

		if (!$summary && preg_match('/^(.+)<!--\s*more\s*-->/s', $this->content_raw, $match))
		{
			$summary = $match[1];
		}

		return $this->parse_content($summary);
	}

	protected function parse_content ($content)
	{
		$content = Markdown($content);
		$content = \GitData\Asset::replace_urls_in_html($this->basedir, $content);

		return $content;
	}
}
